name: Release
on:
    push:
        branches:
            - main
        tags:
            - "v*"
    workflow_dispatch:
        inputs:
            version:
                description: "ÁâàÊú¨Âè∑ (ÈªòËÆ§: latest)"
                required: false
                default: "latest"

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Setup Package Manager
              uses: pnpm/action-setup@v4
              with:
                  run_install: false

            - name: Setup Node.js
              uses: actions/setup-node@v5
              with:
                  cache: "pnpm"
                  node-version-file: ".node-version"

            - name: Install
              run: pnpm install

            - name: Test all
              run: pnpm test

            - name: Build all
              run: pnpm build

    extract-version:
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.version.outputs.version }}
            force-build: ${{ steps.version.outputs.force-build }}
        steps:
            - name: Extract version
              id: version
              run: |
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                      echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
                      echo "force-build=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
                      echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
                      echo "force-build=true" >> $GITHUB_OUTPUT
                  else
                      echo "version=latest" >> $GITHUB_OUTPUT
                      echo "force-build=false" >> $GITHUB_OUTPUT
                  fi

    build-and-push:
        needs: [test, extract-version]
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service:
                    - name: api
                      dockerfile: apps/api/Dockerfile
                      image: xiaoyutamu/control-api
                      environment: production-api
                    - name: app
                      dockerfile: apps/app/Dockerfile
                      image: xiaoyutamu/control-app
                      environment: production-app
        environment: ${{ matrix.service.environment }}
        steps:
            - name: Checkout
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0

            - name: Setup Package Manager
              uses: pnpm/action-setup@v4
              with:
                  run_install: false

            - name: Setup Node.js
              uses: actions/setup-node@v5
              with:
                  cache: "pnpm"
                  node-version-file: ".node-version"

            - name: Install
              run: pnpm install

            - name: Get last successful deployment
              id: last-deploy
              run: |
                  SERVICE_NAME="${{ matrix.service.name }}"

                  # ‰ΩøÁî® GitHub API Ëé∑ÂèñËØ•ÁéØÂ¢ÉÁöÑÊúÄÂêé‰∏ÄÊ¨°ÊàêÂäüÈÉ®ÁΩ≤
                  LAST_DEPLOYMENT=$(gh api \
                    -H "Accept: application/vnd.github+json" \
                    "/repos/${{ github.repository }}/deployments?environment=${{ matrix.service.environment }}&per_page=1" \
                    --jq '.[0].sha' 2>/dev/null || echo "")

                  if [[ -z "$LAST_DEPLOYMENT" ]] || [[ "$LAST_DEPLOYMENT" == "null" ]]; then
                      # Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞ÈÉ®ÁΩ≤ËÆ∞ÂΩïÔºå‰ΩøÁî®ÊúÄËøëÁöÑ 10 Ê¨°Êèê‰∫§‰Ωú‰∏∫ fallback
                      echo "base-commit=HEAD~10" >> $GITHUB_OUTPUT
                      echo "‚ö†Ô∏è Êú™ÊâæÂà∞ $SERVICE_NAME ÁöÑÈÉ®ÁΩ≤ÂéÜÂè≤ÔºåÂØπÊØîÊúÄËøë 10 Ê¨°Êèê‰∫§"
                  else
                      echo "base-commit=$LAST_DEPLOYMENT" >> $GITHUB_OUTPUT
                      echo "‚úÖ ÊâæÂà∞ $SERVICE_NAME ‰∏äÊ¨°ÊàêÂäüÈÉ®ÁΩ≤: $LAST_DEPLOYMENT"
                  fi
              env:
                  GH_TOKEN: ${{ github.token }}

            - name: Check changes
              id: check
              run: |
                  FORCE_BUILD="${{ needs.extract-version.outputs.force-build }}"
                  SERVICE_NAME="${{ matrix.service.name }}"
                  BASE_COMMIT="${{ steps.last-deploy.outputs.base-commit }}"
                  CURRENT_COMMIT="${{ github.sha }}"

                  if [[ "$FORCE_BUILD" == "true" ]]; then
                      echo "should-build=true" >> $GITHUB_OUTPUT
                      echo "reason=force" >> $GITHUB_OUTPUT
                      echo "üî® Âº∫Âà∂ÊûÑÂª∫ $SERVICE_NAME"
                      exit 0
                  fi

                  # Ê£ÄÊü•ÊúçÂä°ÁõÆÂΩïÂíåÂÖ±‰∫´ÂåÖÊòØÂê¶ÊúâÂèòÊõ¥
                  SERVICE_PATH="apps/${SERVICE_NAME}"

                  echo "üîç Ê£ÄÊü•ÂèòÊõ¥ËåÉÂõ¥: $BASE_COMMIT..$CURRENT_COMMIT"

                  # ‰ΩøÁî® git diff Ê£ÄÊü•ÊòØÂê¶ÊúâÂèòÊõ¥
                  if git diff --quiet $BASE_COMMIT $CURRENT_COMMIT -- $SERVICE_PATH packages/; then
                      echo "should-build=false" >> $GITHUB_OUTPUT
                      echo "reason=no-changes" >> $GITHUB_OUTPUT
                      echo "‚è≠Ô∏è $SERVICE_NAME Ëá™‰∏äÊ¨°ÊàêÂäüÈÉ®ÁΩ≤ÂêéÊó†ÂèòÊõ¥"
                  else
                      echo "should-build=true" >> $GITHUB_OUTPUT
                      echo "reason=has-changes" >> $GITHUB_OUTPUT
                      echo "üî® $SERVICE_NAME Ê£ÄÊµãÂà∞ÂèòÊõ¥:"
                      git diff --name-only $BASE_COMMIT $CURRENT_COMMIT -- $SERVICE_PATH packages/ | sed 's/^/  - /'
                  fi

            - name: Create deployment
              if: steps.check.outputs.should-build == 'true'
              id: deployment
              uses: actions/github-script@v7
              with:
                  script: |
                      const deployment = await github.rest.repos.createDeployment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: context.sha,
                        environment: '${{ matrix.service.environment }}',
                        required_contexts: [],
                        auto_merge: false,
                        description: 'Deploy ${{ matrix.service.name }} v${{ needs.extract-version.outputs.version }}'
                      });

                      core.setOutput('deployment_id', deployment.data.id);
                      return deployment.data.id;

            - name: Set up QEMU
              if: steps.check.outputs.should-build == 'true'
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              if: steps.check.outputs.should-build == 'true'
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              if: steps.check.outputs.should-build == 'true'
              uses: docker/login-action@v3
              with:
                  username: ${{ vars.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push
              if: steps.check.outputs.should-build == 'true'
              id: docker-build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ${{ matrix.service.dockerfile }}
                  platforms: linux/arm64
                  push: true
                  tags: |
                      docker.io/${{ matrix.service.image }}:${{ needs.extract-version.outputs.version }}
                      docker.io/${{ matrix.service.image }}:latest
                  cache-from: type=registry,ref=docker.io/${{ matrix.service.image }}:buildcache
                  cache-to: type=registry,ref=docker.io/${{ matrix.service.image }}:buildcache,mode=max

            - name: Update deployment status (success)
              if: steps.check.outputs.should-build == 'true' && success()
              uses: actions/github-script@v7
              with:
                  script: |
                      await github.rest.repos.createDeploymentStatus({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        deployment_id: '${{ steps.deployment.outputs.deployment_id }}',
                        state: 'success',
                        environment_url: 'https://hub.docker.com/r/${{ matrix.service.image }}',
                        description: 'Successfully deployed ${{ matrix.service.name }}'
                      });

            - name: Update deployment status (failure)
              if: steps.check.outputs.should-build == 'true' && failure()
              uses: actions/github-script@v7
              with:
                  script: |
                      await github.rest.repos.createDeploymentStatus({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        deployment_id: '${{ steps.deployment.outputs.deployment_id }}',
                        state: 'failure',
                        description: 'Failed to deploy ${{ matrix.service.name }}'
                      });

            - name: Summary
              if: always()
              run: |
                  SERVICE_NAME="${{ matrix.service.name }}"
                  SHOULD_BUILD="${{ steps.check.outputs.should-build }}"
                  REASON="${{ steps.check.outputs.reason }}"

                  if [[ "$SHOULD_BUILD" == "true" ]]; then
                      if [[ "${{ job.status }}" == "success" ]]; then
                          echo "‚úÖ $SERVICE_NAME - ÊûÑÂª∫ÊàêÂäü"
                      else
                          echo "‚ùå $SERVICE_NAME - ÊûÑÂª∫Â§±Ë¥•"
                      fi
                  else
                      echo "‚è≠Ô∏è $SERVICE_NAME - Ë∑≥ËøáÊûÑÂª∫ (ÂéüÂõ†: $REASON)"
                  fi

    summary:
        needs: [test, extract-version, build-and-push]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Generate summary
              run: |
                  echo "## üì¶ ÂèëÂ∏ÉÊëòË¶Å" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "**ÁâàÊú¨:** ${{ needs.extract-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "**Commit:** [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
                  echo "**Ëß¶ÂèëÊñπÂºè:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [[ "${{ needs.test.result }}" == "failure" ]]; then
                      echo "### ‚ùå ÊµãËØïÂ§±Ë¥•" >> $GITHUB_STEP_SUMMARY
                      exit 1
                  fi

                  if [[ "${{ needs.build-and-push.result }}" == "failure" ]]; then
                      echo "### ‚ö†Ô∏è ÈÉ®ÂàÜÊúçÂä°ÊûÑÂª∫Â§±Ë¥•" >> $GITHUB_STEP_SUMMARY
                      echo "Êü•Áúã‰∏äÊñπÊó•Âøó‰∫ÜËß£ËØ¶ÊÉÖ" >> $GITHUB_STEP_SUMMARY
                  elif [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
                      echo "### ‚úÖ ÈÉ®ÁΩ≤ÂÆåÊàê" >> $GITHUB_STEP_SUMMARY
                      echo "" >> $GITHUB_STEP_SUMMARY
                      echo "Êü•Áúã [Deployments](https://github.com/${{ github.repository }}/deployments) È°µÈù¢‰∫ÜËß£ËØ¶ÊÉÖ" >> $GITHUB_STEP_SUMMARY
                  fi
