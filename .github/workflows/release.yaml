name: Release
on:
    push:
        branches:
            - main
        tags:
            - "v*"
    workflow_dispatch:
        inputs:
            version:
                description: "版本号 (默认: latest)"
                required: false
                default: "latest"

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Setup Package Manager
              uses: pnpm/action-setup@v4
              with:
                  run_install: false

            - name: Setup Node.js
              uses: actions/setup-node@v5
              with:
                  cache: "pnpm"
                  node-version-file: ".node-version"

            - name: Install
              run: pnpm install

            - name: Test all
              run: pnpm test

            - name: Build all
              run: pnpm build

    extract-version:
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.version.outputs.version }}
            force-build: ${{ steps.version.outputs.force-build }}
        steps:
            - name: Extract version
              id: version
              run: |
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                      echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
                      echo "force-build=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
                      echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
                      echo "force-build=true" >> $GITHUB_OUTPUT
                  else
                      echo "version=latest" >> $GITHUB_OUTPUT
                      echo "force-build=false" >> $GITHUB_OUTPUT
                  fi

    build-and-push:
        needs: [test, extract-version]
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service:
                    - name: api
                      dockerfile: apps/api/Dockerfile
                      image: xiaoyutamu/control-api
                    - name: app
                      dockerfile: apps/app/Dockerfile
                      image: xiaoyutamu/control-app
        steps:
            - name: Checkout
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0

            - name: Setup Package Manager
              uses: pnpm/action-setup@v4
              with:
                  run_install: false

            - name: Setup Node.js
              uses: actions/setup-node@v5
              with:
                  cache: "pnpm"
                  node-version-file: ".node-version"

            - name: Install
              run: pnpm install

            - name: Get last deployment tag
              id: last-deploy
              run: |
                  SERVICE="${{ matrix.service.name }}"

                  # 查找最后一个该服务的部署 tag
                  LAST_TAG=$(git tag -l "deployed-${SERVICE}-*" --sort=-version:refname | head -n 1)

                  if [[ -z "$LAST_TAG" ]]; then
                      echo "base-ref=HEAD^" >> $GITHUB_OUTPUT
                      echo "⚠️ 首次部署 $SERVICE, 对比上一次提交"
                  else
                      echo "base-ref=$LAST_TAG" >> $GITHUB_OUTPUT
                      echo "✅ 找到上次部署标记: $LAST_TAG"
                  fi

            - name: Check changes with turbo
              id: check
              run: |
                  if [[ "${{ needs.extract-version.outputs.force-build }}" == "true" ]]; then
                      echo "should-build=true" >> $GITHUB_OUTPUT
                      echo "🔨 强制构建 ${{ matrix.service.name }}"
                      exit 0
                  fi

                  BASE_REF="${{ steps.last-deploy.outputs.base-ref }}"
                  SERVICE="${{ matrix.service.name }}"

                  echo "🔍 使用 turbo-ignore 检查变更..."
                  echo "   对比基准: $BASE_REF"

                  if npx turbo-ignore $SERVICE --fallback=$BASE_REF; then
                      echo "should-build=false" >> $GITHUB_OUTPUT
                      echo "⏭️ $SERVICE 无变更, 跳过构建"
                  else
                      echo "should-build=true" >> $GITHUB_OUTPUT
                      echo "🔨 $SERVICE 有变更, 需要构建"
                  fi

            - name: Set up QEMU
              if: steps.check.outputs.should-build == 'true'
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              if: steps.check.outputs.should-build == 'true'
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              if: steps.check.outputs.should-build == 'true'
              uses: docker/login-action@v3
              with:
                  username: ${{ vars.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push
              if: steps.check.outputs.should-build == 'true'
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ${{ matrix.service.dockerfile }}
                  platforms: linux/arm64
                  push: true
                  tags: |
                      docker.io/${{ matrix.service.image }}:${{ needs.extract-version.outputs.version }}
                      docker.io/${{ matrix.service.image }}:latest
                  cache-from: type=registry,ref=docker.io/${{ matrix.service.image }}:buildcache
                  cache-to: type=registry,ref=docker.io/${{ matrix.service.image }}:buildcache,mode=max

            - name: Tag successful deployment
              if: steps.check.outputs.should-build == 'true' && success()
              run: |
                  SERVICE="${{ matrix.service.name }}"
                  TAG_NAME="deployed-${SERVICE}-$(date +%Y%m%d-%H%M%S)"

                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git tag $TAG_NAME
                  git push origin $TAG_NAME

                  echo "✅ 创建部署标记: $TAG_NAME"

    summary:
        needs: [test, extract-version, build-and-push]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Generate summary
              run: |
                  echo "## 📦 发布摘要" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "**版本:** ${{ needs.extract-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "**Commit:** [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [[ "${{ needs.test.result }}" == "failure" ]]; then
                      echo "❌ 测试失败" >> $GITHUB_STEP_SUMMARY
                  elif [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
                      echo "✅ 部署完成" >> $GITHUB_STEP_SUMMARY
                  fi
